import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import { useAccount } from 'wagmi';

const NFT_CONTRACT = '0xYourNFTContractAddress';
const STAKING_CONTRACT = '0xYourStakingContractAddress';

const NFT_ABI = [
  'function balanceOf(address owner) view returns (uint256)',
  'function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)',
  'function tokenURI(uint256 tokenId) view returns (string)'
];

const STAKING_ABI = [
  'function stake(uint256 tokenId) external'
];

export default function StakePage() {
  const { address, isConnected } = useAccount();
  const [nfts, setNfts] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isConnected && address) {
      fetchMyNFTs();
    }
  }, [address]);

  async function fetchMyNFTs() {
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const nftContract = new ethers.Contract(NFT_CONTRACT, NFT_ABI, provider);
      const balance = await nftContract.balanceOf(address);

      const items = [];
      for (let i = 0; i < Number(balance); i++) {
        const tokenId = await nftContract.tokenOfOwnerByIndex(address, i);
        const uri = await nftContract.tokenURI(tokenId);
        const res = await fetch(uri.replace('ipfs://', 'https://ipfs.io/ipfs/'));
        const metadata = await res.json();
        items.push({ tokenId, metadata });
      }

      setNfts(items);
    } catch (err) {
      console.error('Error fetching NFTs:', err);
    }
  }

  async function stakeNFT(tokenId: number) {
    try {
      setLoading(true);
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const stakingContract = new ethers.Contract(STAKING_CONTRACT, STAKING_ABI, signer);
      const tx = await stakingContract.stake(tokenId);
      await tx.wait();
      fetchMyNFTs();
    } catch (err) {
      console.error('Stake failed:', err);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <h1 className="text-3xl font-bold text-purple-400 mb-6">ðŸ“¥ Stake Your NFTs</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
        {nfts.map(({ tokenId, metadata }) => (
          <div key={tokenId.toString()} className="bg-[#111] p-4 rounded-xl shadow-md">
            <h2 className="text-purple-300 font-semibold mb-2">{metadata.name}</h2>
            <img src={metadata.image?.replace('ipfs://', 'https://ipfs.io/ipfs/')} alt="nft" className="w-full rounded mb-3" />
            <ul className="text-sm text-gray-300 mb-3">
              <li><strong>XP:</strong> {metadata.dna?.xp}</li>
              <li><strong>Energy:</strong> {metadata.dna?.energy}</li>
              <li><strong>Skill:</strong> {metadata.dna?.skill}</li>
            </ul>
            <button
              onClick={() => stakeNFT(tokenId)}
              disabled={loading}
              className="bg-blue-600 hover:bg-blue-500 px-3 py-1 rounded text-sm"
            >
              ðŸ“¥ Stake
            </button>
          </div>
        ))}
      </div>
    </div>
  );
}
